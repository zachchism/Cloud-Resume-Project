# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'Function'       # set this to the path to your function app project, defaults to the repository root
  PYTHON_VERSION: '3.9'                     # set this to the python version to use (e.g. '3.6', '3.7', '3.8')

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false
    
    - name: Inject TF Variables into env.auto.tfvars
      id: tfenvinjection
      uses: jacobtomlinson/gha-find-replace@v2
      with:
          find: 'env_name              = ""'
          replace: 'env_name              = "dev"'
          regex: false
          
    - name: Inject TF Variables into env.auto.tfvars
      id: tfsubinjection
      uses: jacobtomlinson/gha-find-replace@v2
      with:
          find: 'sub_id                = ""'
          replace: 'sub_id                = "e35508e3-9fd2-4e6a-9efc-a8f3c746f051"'
          regex: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      
    # Destroys current TF resources to ensure clean environment
    #- name: Terraform Destroy
    #  run: terraform apply -destroy -auto-approve
      
    # Generates an execution plan for Terraform
    #- name: Terraform Plan
      #run: terraform plan -input=false

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve -input=false
        echo $(terraform output function_app_name)
        echo "AZURE_FUNCTIONAPP_NAME=$(terraform output -raw function_app_name)" >> $GITHUB_ENV
        
    - name: Terraform Echo Check
      id: TF_output
      run: | 
        echo ${{ env.AZURE_FUNCTIONAPP_NAME }}
        echo "AZURE_FUNCTIONAPP_NAME=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
        echo "AZURE_DEV_SUB_ID=$(terraform output -raw Dev_sub_id)" >> $GITHUB_OUTPUT
        echo "AZURE_DEV_RG_ID=$(terraform output -raw dev_rg_id)" >> $GITHUB_OUTPUT
        echo "AZURE_SA_NAME=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
        echo "AZURE_SA_KEY=$(terraform output -raw storage_account_key)" >> $GITHUB_OUTPUT

    # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Add CORS
      run: az functionapp cors add --name ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }} --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --allowed-origins '*'    

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd
        echo ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }}
        
    - name: 'Create Zip'
      uses: thedoctor0/zip-release@0.7.0
      with:
        type: 'zip'
        filename: 'release.zip'
        directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        
    - name: Show build files (before)
      run: ls ${{github.workspace}}/Function/
         
    - name: Empty publish folder make    
      run: |
            mkdir ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/Empty
            
    - name: Copy files to folder
      run:  |
            cp ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/* ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/Empty
            
    - name: Show build files (before)
      run: ls ${{github.workspace}}/Function/Empty
            
    - name: 'Create Empty Zip'
      uses: thedoctor0/zip-release@0.7.0
      with:
        type: 'zip'
        filename: 'empty.zip'
        directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/Empty      
        
    - name: 'Publish Empty AZ Function'   
      run: az functionapp deployment source config-zip --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} --name ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }} --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --src '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/Empty/empty.zip' --build-remote true      
     
    - name: 'Publish AZ Function'   
      run: az functionapp deployment source config-zip --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} --name ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }} --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --src '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/release.zip' --build-remote true  
             
        
    - name: Retrieve publish profile for deployment
      id: publishProfileRetrieval
      run: |
        publishProfiles=$(az webapp deployment list-publishing-profiles \
            --name ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} \
            --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --xml)
          echo "::add-mask::$publishProfiles"
          echo "::set-output name=publishProfiles::$publishProfiles"

    #- name: 'Run Azure Functions Action'
    #  uses: Azure/functions-action@v1
    #  id: fa
    #  with:
    #    app-name: ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }}
    #    package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
     #   publish-profile: ${{ steps.publishProfileRetrieval.outputs.publishProfiles }} # Remove publish-profile to use Azure RBAC
    #    scm-do-build-during-deployment: true
     #   enable-oryx-build: true
        
    - name: Grab AZ FunctionApp InvokeURL
      id: functionAppInvokeRetrieval
      run: echo "AZ_FUNCTION_URL=$(az functionapp function show --name ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }} --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --function-name webapp --query "invokeUrlTemplate" --output tsv)" >> $GITHUB_OUTPUT
         
    - name: Inject InvokeURL into java.css code
      id: invokeURLInjection
      uses: jacobtomlinson/gha-find-replace@v2
      with:
          find: 'const api_url = "";'
          replace: 'const api_url = "${{ steps.functionAppInvokeRetrieval.outputs.AZ_FUNCTION_URL }}";'
          regex: false
          
    
   
    - name: Upload updated java.css
      run: az storage blob upload --account-key ${{ steps.TF_output.outputs.AZURE_SA_KEY }} --account-name ${{ steps.TF_output.outputs.AZURE_SA_NAME }} --container-name \$web -f ${{ github.workspace }}/Static/script.js -n script.js --overwrite
    
    - name: Get storage account URL
      id: getstoragesurl
      run:  echo "AZ_STORAGE_URL=$(az storage account show --name ${{ steps.TF_output.outputs.AZURE_SA_NAME }} --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --query "primaryEndpoints.web" --output tsv)" >> $GITHUB_OUTPUT 
   

   
    - name: Cypress run
      uses: cypress-io/github-action@v5
      with:
          spec: cypress/e2e/custom/test.cy.js
          tag: DEV
          browser: chrome
          record: true
          headed: true
      env:
        CYPRESS_DEV_URL: ${{ steps.getstoragesurl.outputs.AZ_STORAGE_URL }}
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
      
      
