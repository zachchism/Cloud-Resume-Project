name: 'Dev'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'Function'       # set this to the path to your function app project, defaults to the repository root
  PYTHON_VERSION: '3.9'                     # set this to the python version to use (e.g. '3.6', '3.7', '3.8')

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false
    
    - name: Inject TF Variables into env.auto.tfvars
      id: tfenvinjection
      uses: jacobtomlinson/gha-find-replace@v2
      with:
          find: 'env_name              = ""'
          replace: 'env_name              = "dev"'
          regex: false
          
    - name: Inject TF Variables into env.auto.tfvars
      id: tfsubinjection
      uses: jacobtomlinson/gha-find-replace@v2
      with:
          find: 'sub_id                = ""'
          replace: 'sub_id                = "e35508e3-9fd2-4e6a-9efc-a8f3c746f051"'
          regex: false
          
    - name: Inject TF Variables into main.tf
      id: tfworkspaceinjection
      uses: jacobtomlinson/gha-find-replace@v2
      with:
          find: 'name = "Terraform"'
          replace: 'name = "dev"'
          regex: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
    
        # Destroys function app to kleep clean deployment
    - name: Terraform Destroy function app
      run: terraform apply -destroy -target azurerm_linux_function_app.fa  -auto-approve   

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve -input=false
        echo $(terraform output function_app_name)
        echo "AZURE_FUNCTIONAPP_NAME=$(terraform output -raw function_app_name)" >> $GITHUB_ENV
        
    - name: Terraform Echo Check
      id: TF_output
      run: | 
        echo ${{ env.AZURE_FUNCTIONAPP_NAME }}
        echo "AZURE_FUNCTIONAPP_NAME=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
        echo "AZURE_DEV_SUB_ID=$(terraform output -raw sub_id)" >> $GITHUB_OUTPUT
        echo "AZURE_DEV_RG_ID=$(terraform output -raw rg_id)" >> $GITHUB_OUTPUT
        echo "AZURE_SA_NAME=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
        echo "AZURE_SA_KEY=$(terraform output -raw storage_account_key)" >> $GITHUB_OUTPUT

    # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
     
    - name: Add CORS
      run: az functionapp cors add --name ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }} --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --allowed-origins '*'    

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd
        echo ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }}
        
    - name: 'Create Zip'
      uses: thedoctor0/zip-release@0.7.0
      with:
        type: 'zip'
        filename: 'release.zip'
        directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    - name: Upload appcode zip
      run: az storage blob upload -f ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/release.zip --container-name appcode --account-name ${{ steps.TF_output.outputs.AZURE_SA_NAME }} --name release.zip --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --overwrite
      
    - name: Retrieve publish profile for deployment
      id: publishProfileRetrieval
      run: |
        publishProfiles=$(az webapp deployment list-publishing-profiles \
            --name ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} \
            --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --xml)
          echo "::add-mask::$publishProfiles"
          echo "::set-output name=publishProfiles::$publishProfiles"

    - name: Grab AZ FunctionApp InvokeURL
      id: functionAppInvokeRetrieval
      run: echo "AZ_FUNCTION_URL=$(az functionapp function show --name ${{ steps.TF_output.outputs.AZURE_FUNCTIONAPP_NAME }} --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --function-name webapp --query "invokeUrlTemplate" --output tsv)" >> $GITHUB_OUTPUT
         
    - name: Inject InvokeURL into java.css code
      id: invokeURLInjection
      uses: jacobtomlinson/gha-find-replace@v2
      with:
          find: 'const api_url = "";'
          replace: 'const api_url = "${{ steps.functionAppInvokeRetrieval.outputs.AZ_FUNCTION_URL }}";'
          regex: false
          
    - name: Upload updated java.css and site files
      run: |
        az storage blob upload --account-key ${{ steps.TF_output.outputs.AZURE_SA_KEY }} --account-name ${{ steps.TF_output.outputs.AZURE_SA_NAME }} --container-name \$web -f ${{ github.workspace }}/Static/script.js -n script.js --overwrite
        az storage blob upload --account-key ${{ steps.TF_output.outputs.AZURE_SA_KEY }} --account-name ${{ steps.TF_output.outputs.AZURE_SA_NAME }} --container-name \$web -f ${{ github.workspace }}/Static/_index.html -n _index.html --overwrite
        az storage blob upload --account-key ${{ steps.TF_output.outputs.AZURE_SA_KEY }} --account-name ${{ steps.TF_output.outputs.AZURE_SA_NAME }} --container-name \$web -f ${{ github.workspace }}/Static/style.css -n style.css --overwrite
    
    - name: Get storage account URL
      id: getstoragesurl
      run:  echo "AZ_STORAGE_URL=$(az storage account show --name ${{ steps.TF_output.outputs.AZURE_SA_NAME }} --resource-group ${{ steps.TF_output.outputs.AZURE_DEV_RG_ID }} --subscription ${{ steps.TF_output.outputs.AZURE_DEV_SUB_ID }} --query "primaryEndpoints.web" --output tsv)" >> $GITHUB_OUTPUT 
   
    - name: Cypress run
      uses: cypress-io/github-action@v5
      with:
          spec: cypress/e2e/custom/test.cy.js
          tag: DEV
          browser: chrome
          record: true
          headed: true
      env:
        CYPRESS_DEV_URL: ${{ steps.getstoragesurl.outputs.AZ_STORAGE_URL }}
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
      
      
